// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "tyarus/weather-app/internal/dto"

	mock "github.com/stretchr/testify/mock"

	response "tyarus/weather-app/pkg/response"
)

// WeatherUsecaseInterface is an autogenerated mock type for the WeatherUsecaseInterface type
type WeatherUsecaseInterface struct {
	mock.Mock
}

// GetWeathersUsecase provides a mock function with given fields: ctx, req
func (_m *WeatherUsecaseInterface) GetWeathersUsecase(ctx context.Context, req dto.GetWeathersParam) (response.Response[dto.GetWeatherResponse], error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for GetWeathersUsecase")
	}

	var r0 response.Response[dto.GetWeatherResponse]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetWeathersParam) (response.Response[dto.GetWeatherResponse], error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetWeathersParam) response.Response[dto.GetWeatherResponse]); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(response.Response[dto.GetWeatherResponse])
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetWeathersParam) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// SyncWeatherUsecase provides a mock function with given fields: ctx, req
func (_m *WeatherUsecaseInterface) SyncWeatherUsecase(ctx context.Context, req dto.PostWeatherSyncUsecaseRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SyncWeatherUsecase")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostWeatherSyncUsecaseRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// NewWeatherUsecaseInterface creates a new instance of WeatherUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherUsecaseInterface {
	mock := &WeatherUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	dto "tyarus/weather-app/internal/dto"

	mock "github.com/stretchr/testify/mock"

	response "tyarus/weather-app/pkg/response"
)

// LocationUsecaseInterface is an autogenerated mock type for the LocationUsecaseInterface type
type LocationUsecaseInterface struct {
	mock.Mock
}

// CreateLocationUsecase provides a mock function with given fields: ctx, req
func (_m *LocationUsecaseInterface) CreateLocationUsecase(ctx context.Context, req dto.PostLocationHandlerRequest) (dto.GetLocationHandlerResponseItem, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for CreateLocationUsecase")
	}

	var r0 dto.GetLocationHandlerResponseItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostLocationHandlerRequest) (dto.GetLocationHandlerResponseItem, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.PostLocationHandlerRequest) dto.GetLocationHandlerResponseItem); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(dto.GetLocationHandlerResponseItem)
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.PostLocationHandlerRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocationsUsecase provides a mock function with given fields: ctx, param
func (_m *LocationUsecaseInterface) GetLocationsUsecase(ctx context.Context, param dto.GetLocationHandlerParam) (response.Response[response.PaginationData[dto.GetLocationHandlerResponseItem]], error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationsUsecase")
	}

	var r0 response.Response[response.PaginationData[dto.GetLocationHandlerResponseItem]]
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetLocationHandlerParam) (response.Response[response.PaginationData[dto.GetLocationHandlerResponseItem]], error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, dto.GetLocationHandlerParam) response.Response[response.PaginationData[dto.GetLocationHandlerResponseItem]]); ok {
		r0 = rf(ctx, param)
	} else {
		r0 = ret.Get(0).(response.Response[response.PaginationData[dto.GetLocationHandlerResponseItem]])
	}

	if rf, ok := ret.Get(1).(func(context.Context, dto.GetLocationHandlerParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocationUsecaseInterface creates a new instance of LocationUsecaseInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationUsecaseInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationUsecaseInterface {
	mock := &LocationUsecaseInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

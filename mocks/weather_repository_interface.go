// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "tyarus/weather-app/internal/domain"

	mock "github.com/stretchr/testify/mock"

	repository "tyarus/weather-app/internal/repository"
)

// WeatherRepositoryInterface is an autogenerated mock type for the WeatherRepositoryInterface type
type WeatherRepositoryInterface struct {
	mock.Mock
}

// BulkUpsertWeather provides a mock function with given fields: ctx, weathers
func (_m *WeatherRepositoryInterface) BulkUpsertWeather(ctx context.Context, weathers []domain.Weather) ([]domain.Weather, error) {
	ret := _m.Called(ctx, weathers)

	if len(ret) == 0 {
		panic("no return value specified for BulkUpsertWeather")
	}

	var r0 []domain.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Weather) ([]domain.Weather, error)); ok {
		return rf(ctx, weathers)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []domain.Weather) []domain.Weather); ok {
		r0 = rf(ctx, weathers)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []domain.Weather) error); ok {
		r1 = rf(ctx, weathers)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeathers provides a mock function with given fields: ctx, param
func (_m *WeatherRepositoryInterface) GetWeathers(ctx context.Context, param repository.GetWeathersParam) ([]domain.Weather, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for GetWeathers")
	}

	var r0 []domain.Weather
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetWeathersParam) ([]domain.Weather, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetWeathersParam) []domain.Weather); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Weather)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetWeathersParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetWeathersCount provides a mock function with given fields: ctx
func (_m *WeatherRepositoryInterface) GetWeathersCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetWeathersCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewWeatherRepositoryInterface creates a new instance of WeatherRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewWeatherRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *WeatherRepositoryInterface {
	mock := &WeatherRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}

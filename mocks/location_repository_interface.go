// Code generated by mockery v2.53.5. DO NOT EDIT.

package mocks

import (
	context "context"
	domain "tyarus/weather-app/internal/domain"

	mock "github.com/stretchr/testify/mock"

	repository "tyarus/weather-app/internal/repository"
)

// LocationRepositoryInterface is an autogenerated mock type for the LocationRepositoryInterface type
type LocationRepositoryInterface struct {
	mock.Mock
}

// GetLocations provides a mock function with given fields: ctx, param
func (_m *LocationRepositoryInterface) GetLocations(ctx context.Context, param repository.GetLocationsParam) ([]domain.Location, error) {
	ret := _m.Called(ctx, param)

	if len(ret) == 0 {
		panic("no return value specified for GetLocations")
	}

	var r0 []domain.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetLocationsParam) ([]domain.Location, error)); ok {
		return rf(ctx, param)
	}
	if rf, ok := ret.Get(0).(func(context.Context, repository.GetLocationsParam) []domain.Location); ok {
		r0 = rf(ctx, param)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]domain.Location)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, repository.GetLocationsParam) error); ok {
		r1 = rf(ctx, param)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// GetLocationsCount provides a mock function with given fields: ctx
func (_m *LocationRepositoryInterface) GetLocationsCount(ctx context.Context) (int, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for GetLocationsCount")
	}

	var r0 int
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (int, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) int); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(int)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// InsertLocation provides a mock function with given fields: ctx, location
func (_m *LocationRepositoryInterface) InsertLocation(ctx context.Context, location domain.Location) (domain.Location, error) {
	ret := _m.Called(ctx, location)

	if len(ret) == 0 {
		panic("no return value specified for InsertLocation")
	}

	var r0 domain.Location
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, domain.Location) (domain.Location, error)); ok {
		return rf(ctx, location)
	}
	if rf, ok := ret.Get(0).(func(context.Context, domain.Location) domain.Location); ok {
		r0 = rf(ctx, location)
	} else {
		r0 = ret.Get(0).(domain.Location)
	}

	if rf, ok := ret.Get(1).(func(context.Context, domain.Location) error); ok {
		r1 = rf(ctx, location)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// NewLocationRepositoryInterface creates a new instance of LocationRepositoryInterface. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewLocationRepositoryInterface(t interface {
	mock.TestingT
	Cleanup(func())
}) *LocationRepositoryInterface {
	mock := &LocationRepositoryInterface{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
